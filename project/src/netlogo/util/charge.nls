;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   Charge Support Procedures   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The following utility functions operate on an custom coordinate data
;; structure:
;;
;;    [x-coord, y-coord, distance, charge]
;;
;; The x and y values must always be present, and one of distance or charge
;; must be. If distance is provided, charge is calculated from it. If charge
;; is provided, the distance is ignored.
;;
;; The empty list is treated as a nil value and is checked in the
;; `dist-or-charge-k` function.

to-report x-coord [data]
  report item 0 data
end

to-report y-coord [data]
  report item 1 data
end

to-report dist-coord [data]
  ifelse (length data) < 3
    [ report [] ]
    [ report item 2 data ]
end

to-report charge-coord [data]
  ifelse (length data) < 4
    [ report [] ]
    [ report item 3 data ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report summed-coords [coords]
  report reduce [ [acc coord] -> (list (x-coord acc + x-coord coord)
                                       (y-coord acc + y-coord coord)) ]
                coords
end

to-report center-of-coords [coords]
  report map [ coord -> coord / (length coords) ]
             (summed-coords coords)
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report charge [d]
  report charge-k 1 d
end

to-report dist-or-charge [augmented-coord]
  report dist-or-charge-k 1 augmented-coord
end

to-report x-coord-times-charge [augmented-coord]
  report x-coord-times-charge-k 1 augmented-coord
end

to-report x-coords-times-charge [augmented-coords]
  report x-coords-times-charge-k 1 augmented-coords
end

to-report y-coord-times-charge [augmented-coord]
  report y-coord-times-charge-k 1 augmented-coord
end

to-report y-coords-times-charge [augmented-coords]
  report y-coords-times-charge-k 1 augmented-coords
end

to-report summed-charge [augmented-coords]
  report summed-charge-k 1 augmented-coords
end

to-report center-of-charge [augmented-coords]
  report center-of-charge-k 1 augmented-coords
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Inverse square of distance
;;
;; This is used to ensure that the closer an agent is, the greater the impact
;; it has.
to-report charge-k [k d]
  ;; print sentence "distance: " d
  ;; print sentence "charge constant: " k
  ifelse (is-number? d)
    [ report k * (d)^(-2) ]
    [ report 0 ]
end

to-report dist-or-charge-k [k augmented-coord]
  let q (charge-coord augmented-coord)
  ifelse (is-number? q)
    [ report q ]
    [ report (charge-k k (dist-coord augmented-coord)) ]
end

to-report x-coord-times-charge-k [k augmented-coord]
  report (x-coord augmented-coord) * (dist-or-charge-k k augmented-coord)
end

to-report x-coords-times-charge-k [k augmented-coords]
  report map [ coord -> (x-coord-times-charge-k k coord) ] augmented-coords
end

to-report y-coord-times-charge-k [k augmented-coord]
  report (y-coord augmented-coord) * (dist-or-charge-k k augmented-coord)
end

to-report y-coords-times-charge-k [k augmented-coords]
  report map [ coord -> (y-coord-times-charge-k k coord) ] augmented-coords
end

;; Given a set of "augmented" coordinates (x,y coords with a third element that
;; represents the distance to an agent in question or a fourth element that
;; represents the charge value between self and an agent in question), sum the
;; charges.
;;
;; The summed charge is used in the denominator of the equation for determining
;; the "center of charge" (analogous to center of mass).
to-report summed-charge-k [k augmented-coords]
  report sum map [ coord -> (dist-or-charge-k k coord) ]
                 augmented-coords
end

;; This is the function that is analogous to the center of mass and is used to
;; calculate the coordinates to which an agent is attracted (given a collection
;; of other agents) and the extent to which it is attracted.
to-report center-of-charge-k [k augmented-coords]
  let summed-q (summed-charge-k k augmented-coords)
  if summed-q = 0 [
    set summed-q 1
  ]
  report (list (sum (x-coords-times-charge-k k augmented-coords) / summed-q)
               (sum (y-coords-times-charge-k k augmented-coords) / summed-q))
end
